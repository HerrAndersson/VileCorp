#include "Pointlight.h"
#include <stdexcept>
using namespace DirectX;

namespace Renderer
{
	Pointlight::Pointlight(ID3D11Device* device, XMFLOAT3 position, float range, float intensity, XMFLOAT3 color)
	{
		_position = position;
		_range = range;
		_intensity = intensity;
		_color = color;

		Update();

		CreateIcoSphereVolume(device);
	}

	Pointlight::~Pointlight()
	{
		_lightSphereVolume->Release();
	}

	void Pointlight::CreateIcoSphereVolume(ID3D11Device* device)
	{
		//IcoSphere vertex data. Has a diameter of 1 unit
		XMFLOAT3 vertices[] = {
		{-0.081228f, -0.425327f, -0.249997f},
		{ 0.212662f, -0.425327f, -0.154506f },
		{ 0.0f, -0.5f, -0.0f },
		{ 0.425324f, -0.262868f, -0.0f },
		{ 0.212662f, -0.425327f, -0.154506f },
		{ 0.361804f, -0.22361f, -0.262863f },
		{ -0.262865f, -0.425326f, -0.0f },
		{ -0.081228f, -0.425327f, -0.249997f },
		{ 0.0f, -0.5f, -0.0f },
		{ -0.081228f, -0.425327f, 0.249997f },
		{ -0.262865f, -0.425326f, -0.0f },
		{ 0.0f, -0.5f, -0.0f },
		{ 0.212662f, -0.425327f, 0.154506f },
		{ -0.081228f, -0.425327f, 0.249997f },
		{ 0.0f, -0.5f, -0.0f },
		{ 0.475529f, 0.0f, -0.154507f },
		{ 0.425324f, -0.262868f, -0.0f },
		{ 0.361804f, -0.22361f, -0.262863f },
		{ 0.0f, 0.0f, -0.5f },
		{ 0.131435f, -0.262869f, -0.404506f },
		{ -0.138194f, -0.22361f, -0.425324f },
		{ -0.475529f, 0.0f, -0.154507f },
		{ -0.344095f, -0.262868f, -0.249998f },
		{ -0.447213f, -0.223608f, -0.0f },
		{ -0.293893f, 0.0f, 0.404509f },
		{ -0.344095f, -0.262868f, 0.249998f },
		{ -0.138194f, -0.22361f, 0.425324f },
		{ 0.293893f, 0.0f, 0.404509f },
		{ 0.131435f, -0.262869f, 0.404506f },
		{ 0.361804f, -0.22361f, 0.262863f },
		{ 0.293893f, 0.0f, -0.404509f },
		{ 0.475529f, 0.0f, -0.154507f },
		{ 0.361804f, -0.22361f, -0.262863f },
		{ -0.293893f, 0.0f, -0.404509f },
		{ 0.0f, 0.0f, -0.5f },
		{ -0.138194f, -0.22361f, -0.425324f },
		{ -0.475529f, 0.0f, 0.154507f },
		{ -0.475529f, 0.0f, -0.154507f },
		{ -0.447213f, -0.223608f, -0.0f },
		{ 0.0f, 0.0f, 0.5f },
		{ -0.293893f, 0.0f, 0.404509f },
		{ -0.138194f, -0.22361f, 0.425324f },
		{ 0.475529f, 0.0f, 0.154507f },
		{ 0.293893f, 0.0f, 0.404509f },
		{ 0.361804f, -0.22361f, 0.262863f },
		{ 0.081228f, 0.425327f, -0.249997f },
		{ 0.344095f, 0.262868f, -0.249998f },
		{ 0.138194f, 0.22361f, -0.425324f },
		{ -0.212662f, 0.425327f, -0.154506f },
		{ -0.131435f, 0.262869f, -0.404506f },
		{ -0.361804f, 0.22361f, -0.262863f },
		{ -0.212662f, 0.425327f, 0.154506f },
		{ -0.425324f, 0.262868f, -0.0f },
		{ -0.361804f, 0.22361f, 0.262863f },
		{ 0.081228f, 0.425327f, 0.249997f },
		{ -0.131435f, 0.262869f, 0.404506f },
		{ 0.138194f, 0.22361f, 0.425324f },
		{ 0.262865f, 0.425326f, -0.0f },
		{ 0.344095f, 0.262868f, 0.249998f },
		{ 0.447213f, 0.223608f, -0.0f },
		{ -0.138194f, -0.22361f, -0.425324f },
		{ 0.131435f, -0.262869f, -0.404506f },
		{ -0.081228f, -0.425327f, -0.249997f },
		{ 0.131435f, -0.262869f, -0.404506f },
		{ 0.212662f, -0.425327f, -0.154506f },
		{ -0.081228f, -0.425327f, -0.249997f },
		{ 0.131435f, -0.262869f, -0.404506f },
		{ 0.361804f, -0.22361f, -0.262863f },
		{ 0.212662f, -0.425327f, -0.154506f },
		{ 0.361804f, -0.22361f, 0.262863f },
		{ 0.212662f, -0.425327f, 0.154506f },
		{ 0.425324f, -0.262868f, -0.0f },
		{ 0.212662f, -0.425327f, 0.154506f },
		{ 0.212662f, -0.425327f, -0.154506f },
		{ 0.425324f, -0.262868f, -0.0f },
		{ 0.212662f, -0.425327f, 0.154506f },
		{ 0.0f, -0.5f, -0.0f },
		{ 0.212662f, -0.425327f, -0.154506f },
		{ -0.447213f, -0.223608f, -0.0f },
		{ -0.344095f, -0.262868f, -0.249998f },
		{ -0.262865f, -0.425326f, -0.0f },
		{ -0.344095f, -0.262868f, -0.249998f },
		{ -0.081228f, -0.425327f, -0.249997f },
		{ -0.262865f, -0.425326f, -0.0f },
		{ -0.344095f, -0.262868f, -0.249998f },
		{ -0.138194f, -0.22361f, -0.425324f },
		{ -0.081228f, -0.425327f, -0.249997f },
		{ -0.138194f, -0.22361f, 0.425324f },
		{ -0.344095f, -0.262868f, 0.249998f },
		{ -0.081228f, -0.425327f, 0.249997f },
		{ -0.344095f, -0.262868f, 0.249998f },
		{ -0.262865f, -0.425326f, -0.0f },
		{ -0.081228f, -0.425327f, 0.249997f },
		{ -0.344095f, -0.262868f, 0.249998f },
		{ -0.447213f, -0.223608f, -0.0f },
		{ -0.262865f, -0.425326f, -0.0f },
		{ 0.361804f, -0.22361f, 0.262863f },
		{ 0.131435f, -0.262869f, 0.404506f },
		{ 0.212662f, -0.425327f, 0.154506f },
		{ 0.131435f, -0.262869f, 0.404506f },
		{ -0.081228f, -0.425327f, 0.249997f },
		{ 0.212662f, -0.425327f, 0.154506f },
		{ 0.131435f, -0.262869f, 0.404506f },
		{ -0.138194f, -0.22361f, 0.425324f },
		{ -0.081228f, -0.425327f, 0.249997f },
		{ 0.447213f, 0.223608f, -0.0f },
		{ 0.475529f, 0.0f, 0.154507f },
		{ 0.475529f, 0.0f, -0.154507f },
		{ 0.475529f, 0.0f, 0.154507f },
		{ 0.425324f, -0.262868f, -0.0f },
		{ 0.475529f, 0.0f, -0.154507f },
		{ 0.475529f, 0.0f, 0.154507f },
		{ 0.361804f, -0.22361f, 0.262863f },
		{ 0.425324f, -0.262868f, -0.0f },
		{ 0.138194f, 0.22361f, -0.425324f },
		{ 0.293893f, 0.0f, -0.404509f },
		{ 0.0f, 0.0f, -0.5f },
		{ 0.293893f, 0.0f, -0.404509f },
		{ 0.131435f, -0.262869f, -0.404506f },
		{ 0.0f, 0.0f, -0.5f },
		{ 0.293893f, 0.0f, -0.404509f },
		{ 0.361804f, -0.22361f, -0.262863f },
		{ 0.131435f, -0.262869f, -0.404506f },
		{ -0.361804f, 0.22361f, -0.262863f },
		{ -0.293893f, 0.0f, -0.404509f },
		{ -0.475529f, 0.0f, -0.154507f },
		{ -0.293893f, 0.0f, -0.404509f },
		{ -0.344095f, -0.262868f, -0.249998f },
		{ -0.475529f, 0.0f, -0.154507f },
		{ -0.293893f, 0.0f, -0.404509f },
		{ -0.138194f, -0.22361f, -0.425324f },
		{ -0.344095f, -0.262868f, -0.249998f },
		{ -0.361804f, 0.22361f, 0.262863f },
		{ -0.475529f, 0.0f, 0.154507f },
		{ -0.293893f, 0.0f, 0.404509f },
		{ -0.475529f, 0.0f, 0.154507f },
		{ -0.344095f, -0.262868f, 0.249998f },
		{ -0.293893f, 0.0f, 0.404509f },
		{ -0.475529f, 0.0f, 0.154507f },
		{ -0.447213f, -0.223608f, -0.0f },
		{ -0.344095f, -0.262868f, 0.249998f },
		{ 0.138194f, 0.22361f, 0.425324f },
		{ 0.0f, 0.0f, 0.5f },
		{ 0.293893f, 0.0f, 0.404509f },
		{ 0.0f, 0.0f, 0.5f },
		{ 0.131435f, -0.262869f, 0.404506f },
		{ 0.293893f, 0.0f, 0.404509f },
		{ 0.0f, 0.0f, 0.5f },
		{ -0.138194f, -0.22361f, 0.425324f },
		{ 0.131435f, -0.262869f, 0.404506f },
		{ 0.138194f, 0.22361f, -0.425324f },
		{ 0.344095f, 0.262868f, -0.249998f },
		{ 0.293893f, 0.0f, -0.404509f },
		{ 0.344095f, 0.262868f, -0.249998f },
		{ 0.475529f, 0.0f, -0.154507f },
		{ 0.293893f, 0.0f, -0.404509f },
		{ 0.344095f, 0.262868f, -0.249998f },
		{ 0.447213f, 0.223608f, -0.0f },
		{ 0.475529f, 0.0f, -0.154507f },
		{ -0.361804f, 0.22361f, -0.262863f },
		{ -0.131435f, 0.262869f, -0.404506f },
		{ -0.293893f, 0.0f, -0.404509f },
		{ -0.131435f, 0.262869f, -0.404506f },
		{ 0.0f, 0.0f, -0.5f },
		{ -0.293893f, 0.0f, -0.404509f },
		{ -0.131435f, 0.262869f, -0.404506f },
		{ 0.138194f, 0.22361f, -0.425324f },
		{ 0.0f, 0.0f, -0.5f },
		{ -0.361804f, 0.22361f, 0.262863f },
		{ -0.425324f, 0.262868f, -0.0f },
		{ -0.475529f, 0.0f, 0.154507f },
		{ -0.425324f, 0.262868f, -0.0f },
		{ -0.475529f, 0.0f, -0.154507f },
		{ -0.475529f, 0.0f, 0.154507f },
		{ -0.425324f, 0.262868f, -0.0f },
		{ -0.361804f, 0.22361f, -0.262863f },
		{ -0.475529f, 0.0f, -0.154507f },
		{ 0.138194f, 0.22361f, 0.425324f },
		{ -0.131435f, 0.262869f, 0.404506f },
		{ 0.0f, 0.0f, 0.5f },
		{ -0.131435f, 0.262869f, 0.404506f },
		{ -0.293893f, 0.0f, 0.404509f },
		{ 0.0f, 0.0f, 0.5f },
		{ -0.131435f, 0.262869f, 0.404506f },
		{ -0.361804f, 0.22361f, 0.262863f },
		{ -0.293893f, 0.0f, 0.404509f },
		{ 0.447213f, 0.223608f, -0.0f },
		{ 0.344095f, 0.262868f, 0.249998f },
		{ 0.475529f, 0.0f, 0.154507f },
		{ 0.344095f, 0.262868f, 0.249998f },
		{ 0.293893f, 0.0f, 0.404509f },
		{ 0.475529f, 0.0f, 0.154507f },
		{ 0.344095f, 0.262868f, 0.249998f },
		{ 0.138194f, 0.22361f, 0.425324f },
		{ 0.293893f, 0.0f, 0.404509f },
		{ 0.0f, 0.5f, -0.0f },
		{ 0.262865f, 0.425326f, -0.0f },
		{ 0.081228f, 0.425327f, -0.249997f },
		{ 0.262865f, 0.425326f, -0.0f },
		{ 0.344095f, 0.262868f, -0.249998f },
		{ 0.081228f, 0.425327f, -0.249997f },
		{ 0.262865f, 0.425326f, -0.0f },
		{ 0.447213f, 0.223608f, -0.0f },
		{ 0.344095f, 0.262868f, -0.249998f },
		{ 0.0f, 0.5f, -0.0f },
		{ 0.081228f, 0.425327f, -0.249997f },
		{ -0.212662f, 0.425327f, -0.154506f },
		{ 0.081228f, 0.425327f, -0.249997f },
		{ -0.131435f, 0.262869f, -0.404506f },
		{ -0.212662f, 0.425327f, -0.154506f },
		{ 0.081228f, 0.425327f, -0.249997f },
		{ 0.138194f, 0.22361f, -0.425324f },
		{ -0.131435f, 0.262869f, -0.404506f },
		{ 0.0f, 0.5f, -0.0f },
		{ -0.212662f, 0.425327f, -0.154506f },
		{ -0.212662f, 0.425327f, 0.154506f },
		{ -0.212662f, 0.425327f, -0.154506f },
		{ -0.425324f, 0.262868f, -0.0f },
		{ -0.212662f, 0.425327f, 0.154506f },
		{ -0.212662f, 0.425327f, -0.154506f },
		{ -0.361804f, 0.22361f, -0.262863f },
		{ -0.425324f, 0.262868f, -0.0f },
		{ 0.0f, 0.5f, -0.0f },
		{ -0.212662f, 0.425327f, 0.154506f },
		{ 0.081228f, 0.425327f, 0.249997f },
		{ -0.212662f, 0.425327f, 0.154506f },
		{ -0.131435f, 0.262869f, 0.404506f },
		{ 0.081228f, 0.425327f, 0.249997f },
		{ -0.212662f, 0.425327f, 0.154506f },
		{ -0.361804f, 0.22361f, 0.262863f },
		{ -0.131435f, 0.262869f, 0.404506f },
		{ 0.0f, 0.5f, -0.0f },
		{ 0.081228f, 0.425327f, 0.249997f },
		{ 0.262865f, 0.425326f, -0.0f },
		{ 0.081228f, 0.425327f, 0.249997f },
		{ 0.344095f, 0.262868f, 0.249998f },
		{ 0.262865f, 0.425326f, -0.0f },
		{ 0.081228f, 0.425327f, 0.249997f },
		{ 0.138194f, 0.22361f, 0.425324f },
		{ 0.344095f, 0.262868f, 0.249998f },
		};

		_vertexCount = sizeof(vertices) / sizeof(vertices[0]);
		_vertexSize = sizeof(XMFLOAT3);

		D3D11_BUFFER_DESC bufferDesc;
		ZeroMemory(&bufferDesc, sizeof(bufferDesc));
		bufferDesc.BindFlags = D3D11_BIND_VERTEX_BUFFER;
		bufferDesc.Usage = D3D11_USAGE_DEFAULT;
		bufferDesc.ByteWidth = _vertexSize * _vertexCount;

		D3D11_SUBRESOURCE_DATA data;
		data.pSysMem = vertices;
		HRESULT result = device->CreateBuffer(&bufferDesc, &data, &_lightSphereVolume);
		if (FAILED(result))
		{
			throw std::runtime_error("Pointlight::CreateIcoSphereVolume: Failed to create vertex buffer");
		}
	}

	void Pointlight::Update()
	{
		_worldMatrix = XMMatrixScaling(_range, _range, _range) * XMMatrixTranslation(_position.x, _position.y, _position.z);
	}

	void Pointlight::SetPosition(XMFLOAT3 position)
	{
		_position = position;
		Update();
	}

	void Pointlight::SetRange(float range)
	{
		_range = range;
		Update();
	}

	void Pointlight::SetColor(XMFLOAT3 color)
	{
		_color = color;
	}

	XMMATRIX* Pointlight::GetWorldMatrix()
	{
		return &_worldMatrix;
	}

	XMFLOAT3 Pointlight::GetPosition() const
	{
		return _position;
	}

	XMFLOAT3 Pointlight::GetColor() const
	{
		return _color;
	}

	float Pointlight::GetRange() const
	{
		return _range;
	}

	float Pointlight::GetIntensity() const
	{
		return _intensity;
	}

	int Pointlight::GetVertexCount() const
	{
		return _vertexCount;
	}

	int Pointlight::GetVertexSize() const
	{
		return _vertexSize;
	}

	ID3D11Buffer* Pointlight::GetVolumeBuffer()
	{
		return _lightSphereVolume;
	}

	//Overloading these guarantees 16B alignment of XMMATRIX
	void* Pointlight::operator new(size_t i)
	{
		return _mm_malloc(i, 16);
	}

	void Pointlight::operator delete(void* p)
	{
		_mm_free(p);
	}
}
